/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.remote.application.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the RemoteForm service. Represents a row in the &quot;remote_RemoteForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.remote.application.model.impl.RemoteFormModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.remote.application.model.impl.RemoteFormImpl}.
 * </p>
 *
 * @author JuYin
 * @see RemoteForm
 * @see com.remote.application.model.impl.RemoteFormImpl
 * @see com.remote.application.model.impl.RemoteFormModelImpl
 * @generated
 */
public interface RemoteFormModel extends BaseModel<RemoteForm> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a remote form model instance should use the {@link RemoteForm} interface instead.
	 */

	/**
	 * Returns the primary key of this remote form.
	 *
	 * @return the primary key of this remote form
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this remote form.
	 *
	 * @param primaryKey the primary key of this remote form
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the remote form ID of this remote form.
	 *
	 * @return the remote form ID of this remote form
	 */
	public long getRemoteFormId();

	/**
	 * Sets the remote form ID of this remote form.
	 *
	 * @param remoteFormId the remote form ID of this remote form
	 */
	public void setRemoteFormId(long remoteFormId);

	/**
	 * Returns the creator of this remote form.
	 *
	 * @return the creator of this remote form
	 */
	@AutoEscape
	public String getCreator();

	/**
	 * Sets the creator of this remote form.
	 *
	 * @param creator the creator of this remote form
	 */
	public void setCreator(String creator);

	/**
	 * Returns the applicant of this remote form.
	 *
	 * @return the applicant of this remote form
	 */
	@AutoEscape
	public String getApplicant();

	/**
	 * Sets the applicant of this remote form.
	 *
	 * @param applicant the applicant of this remote form
	 */
	public void setApplicant(String applicant);

	/**
	 * Returns the remote date of this remote form.
	 *
	 * @return the remote date of this remote form
	 */
	public Date getRemoteDate();

	/**
	 * Sets the remote date of this remote form.
	 *
	 * @param remoteDate the remote date of this remote form
	 */
	public void setRemoteDate(Date remoteDate);

	/**
	 * Returns the end date time of this remote form.
	 *
	 * @return the end date time of this remote form
	 */
	public Date getEndDateTime();

	/**
	 * Sets the end date time of this remote form.
	 *
	 * @param endDateTime the end date time of this remote form
	 */
	public void setEndDateTime(Date endDateTime);

	/**
	 * Returns the remark of this remote form.
	 *
	 * @return the remark of this remote form
	 */
	@AutoEscape
	public String getRemark();

	/**
	 * Sets the remark of this remote form.
	 *
	 * @param remark the remark of this remote form
	 */
	public void setRemark(String remark);

	/**
	 * Returns the ext payload of this remote form.
	 *
	 * @return the ext payload of this remote form
	 */
	@AutoEscape
	public String getExtPayload();

	/**
	 * Sets the ext payload of this remote form.
	 *
	 * @param extPayload the ext payload of this remote form
	 */
	public void setExtPayload(String extPayload);

	/**
	 * Returns the form title of this remote form.
	 *
	 * @return the form title of this remote form
	 */
	@AutoEscape
	public String getFormTitle();

	/**
	 * Sets the form title of this remote form.
	 *
	 * @param formTitle the form title of this remote form
	 */
	public void setFormTitle(String formTitle);

	/**
	 * Returns the day tab of this remote form.
	 *
	 * @return the day tab of this remote form
	 */
	@AutoEscape
	public String getDayTab();

	/**
	 * Sets the day tab of this remote form.
	 *
	 * @param dayTab the day tab of this remote form
	 */
	public void setDayTab(String dayTab);

	/**
	 * Returns the calendar booking ID of this remote form.
	 *
	 * @return the calendar booking ID of this remote form
	 */
	public long getCalendarBookingId();

	/**
	 * Sets the calendar booking ID of this remote form.
	 *
	 * @param calendarBookingId the calendar booking ID of this remote form
	 */
	public void setCalendarBookingId(long calendarBookingId);

	/**
	 * Returns the status of this remote form.
	 *
	 * @return the status of this remote form
	 */
	public int getStatus();

	/**
	 * Sets the status of this remote form.
	 *
	 * @param status the status of this remote form
	 */
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this remote form.
	 *
	 * @return the status by user ID of this remote form
	 */
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this remote form.
	 *
	 * @param statusByUserId the status by user ID of this remote form
	 */
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this remote form.
	 *
	 * @return the status by user uuid of this remote form
	 * @throws SystemException if a system exception occurred
	 */
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this remote form.
	 *
	 * @param statusByUserUuid the status by user uuid of this remote form
	 */
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by username of this remote form.
	 *
	 * @return the status by username of this remote form
	 */
	@AutoEscape
	public String getStatusByUsername();

	/**
	 * Sets the status by username of this remote form.
	 *
	 * @param statusByUsername the status by username of this remote form
	 */
	public void setStatusByUsername(String statusByUsername);

	/**
	 * Returns the status date of this remote form.
	 *
	 * @return the status date of this remote form
	 */
	public Date getStatusDate();

	/**
	 * Sets the status date of this remote form.
	 *
	 * @param statusDate the status date of this remote form
	 */
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the company ID of this remote form.
	 *
	 * @return the company ID of this remote form
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this remote form.
	 *
	 * @param companyId the company ID of this remote form
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this remote form.
	 *
	 * @return the group ID of this remote form
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this remote form.
	 *
	 * @param groupId the group ID of this remote form
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the cuser ID of this remote form.
	 *
	 * @return the cuser ID of this remote form
	 */
	public long getCuserId();

	/**
	 * Sets the cuser ID of this remote form.
	 *
	 * @param cuserId the cuser ID of this remote form
	 */
	public void setCuserId(long cuserId);

	/**
	 * Returns the muser ID of this remote form.
	 *
	 * @return the muser ID of this remote form
	 */
	public long getMuserId();

	/**
	 * Sets the muser ID of this remote form.
	 *
	 * @param muserId the muser ID of this remote form
	 */
	public void setMuserId(long muserId);

	/**
	 * Returns the create date of this remote form.
	 *
	 * @return the create date of this remote form
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this remote form.
	 *
	 * @param createDate the create date of this remote form
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this remote form.
	 *
	 * @return the modified date of this remote form
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this remote form.
	 *
	 * @param modifiedDate the modified date of this remote form
	 */
	public void setModifiedDate(Date modifiedDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(com.remote.application.model.RemoteForm remoteForm);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.remote.application.model.RemoteForm> toCacheModel();

	@Override
	public com.remote.application.model.RemoteForm toEscapedModel();

	@Override
	public com.remote.application.model.RemoteForm toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}