/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.remote.application.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.remote.application.model.RemoteForm;
import com.remote.application.model.RemoteFormModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RemoteForm service. Represents a row in the &quot;remote_RemoteForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.remote.application.model.RemoteFormModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RemoteFormImpl}.
 * </p>
 *
 * @author JuYin
 * @see RemoteFormImpl
 * @see com.remote.application.model.RemoteForm
 * @see com.remote.application.model.RemoteFormModel
 * @generated
 */
public class RemoteFormModelImpl extends BaseModelImpl<RemoteForm>
	implements RemoteFormModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a remote form model instance should use the {@link com.remote.application.model.RemoteForm} interface instead.
	 */
	public static final String TABLE_NAME = "remote_RemoteForm";
	public static final Object[][] TABLE_COLUMNS = {
			{ "remoteFormId", Types.BIGINT },
			{ "creator", Types.VARCHAR },
			{ "applicant", Types.VARCHAR },
			{ "remoteDate", Types.TIMESTAMP },
			{ "endDateTime", Types.TIMESTAMP },
			{ "remark", Types.VARCHAR },
			{ "extPayload", Types.VARCHAR },
			{ "formTitle", Types.VARCHAR },
			{ "dayTab", Types.VARCHAR },
			{ "calendarBookingId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUsername", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "cuserId", Types.BIGINT },
			{ "muserId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table remote_RemoteForm (remoteFormId LONG not null primary key,creator VARCHAR(75) null,applicant VARCHAR(75) null,remoteDate DATE null,endDateTime DATE null,remark VARCHAR(500) null,extPayload VARCHAR(500) null,formTitle VARCHAR(75) null,dayTab VARCHAR(75) null,calendarBookingId LONG,status INTEGER,statusByUserId LONG,statusByUsername VARCHAR(75) null,statusDate DATE null,companyId LONG,groupId LONG,cuserId LONG,muserId LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table remote_RemoteForm";
	public static final String ORDER_BY_JPQL = " ORDER BY remoteForm.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY remote_RemoteForm.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.remote.application.model.RemoteForm"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.remote.application.model.RemoteForm"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.remote.application.model.RemoteForm"),
			true);
	public static long CREATOR_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;
	public static long CREATEDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.remote.application.model.RemoteForm"));

	public RemoteFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _remoteFormId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRemoteFormId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _remoteFormId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RemoteForm.class;
	}

	@Override
	public String getModelClassName() {
		return RemoteForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("remoteFormId", getRemoteFormId());
		attributes.put("creator", getCreator());
		attributes.put("applicant", getApplicant());
		attributes.put("remoteDate", getRemoteDate());
		attributes.put("endDateTime", getEndDateTime());
		attributes.put("remark", getRemark());
		attributes.put("extPayload", getExtPayload());
		attributes.put("formTitle", getFormTitle());
		attributes.put("dayTab", getDayTab());
		attributes.put("calendarBookingId", getCalendarBookingId());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUsername", getStatusByUsername());
		attributes.put("statusDate", getStatusDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("cuserId", getCuserId());
		attributes.put("muserId", getMuserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long remoteFormId = (Long)attributes.get("remoteFormId");

		if (remoteFormId != null) {
			setRemoteFormId(remoteFormId);
		}

		String creator = (String)attributes.get("creator");

		if (creator != null) {
			setCreator(creator);
		}

		String applicant = (String)attributes.get("applicant");

		if (applicant != null) {
			setApplicant(applicant);
		}

		Date remoteDate = (Date)attributes.get("remoteDate");

		if (remoteDate != null) {
			setRemoteDate(remoteDate);
		}

		Date endDateTime = (Date)attributes.get("endDateTime");

		if (endDateTime != null) {
			setEndDateTime(endDateTime);
		}

		String remark = (String)attributes.get("remark");

		if (remark != null) {
			setRemark(remark);
		}

		String extPayload = (String)attributes.get("extPayload");

		if (extPayload != null) {
			setExtPayload(extPayload);
		}

		String formTitle = (String)attributes.get("formTitle");

		if (formTitle != null) {
			setFormTitle(formTitle);
		}

		String dayTab = (String)attributes.get("dayTab");

		if (dayTab != null) {
			setDayTab(dayTab);
		}

		Long calendarBookingId = (Long)attributes.get("calendarBookingId");

		if (calendarBookingId != null) {
			setCalendarBookingId(calendarBookingId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUsername = (String)attributes.get("statusByUsername");

		if (statusByUsername != null) {
			setStatusByUsername(statusByUsername);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long cuserId = (Long)attributes.get("cuserId");

		if (cuserId != null) {
			setCuserId(cuserId);
		}

		Long muserId = (Long)attributes.get("muserId");

		if (muserId != null) {
			setMuserId(muserId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getRemoteFormId() {
		return _remoteFormId;
	}

	@Override
	public void setRemoteFormId(long remoteFormId) {
		_remoteFormId = remoteFormId;
	}

	@Override
	public String getCreator() {
		if (_creator == null) {
			return StringPool.BLANK;
		}
		else {
			return _creator;
		}
	}

	@Override
	public void setCreator(String creator) {
		_columnBitmask |= CREATOR_COLUMN_BITMASK;

		if (_originalCreator == null) {
			_originalCreator = _creator;
		}

		_creator = creator;
	}

	public String getOriginalCreator() {
		return GetterUtil.getString(_originalCreator);
	}

	@Override
	public String getApplicant() {
		if (_applicant == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicant;
		}
	}

	@Override
	public void setApplicant(String applicant) {
		_applicant = applicant;
	}

	@Override
	public Date getRemoteDate() {
		return _remoteDate;
	}

	@Override
	public void setRemoteDate(Date remoteDate) {
		_remoteDate = remoteDate;
	}

	@Override
	public Date getEndDateTime() {
		return _endDateTime;
	}

	@Override
	public void setEndDateTime(Date endDateTime) {
		_endDateTime = endDateTime;
	}

	@Override
	public String getRemark() {
		if (_remark == null) {
			return StringPool.BLANK;
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		_remark = remark;
	}

	@Override
	public String getExtPayload() {
		if (_extPayload == null) {
			return StringPool.BLANK;
		}
		else {
			return _extPayload;
		}
	}

	@Override
	public void setExtPayload(String extPayload) {
		_extPayload = extPayload;
	}

	@Override
	public String getFormTitle() {
		if (_formTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _formTitle;
		}
	}

	@Override
	public void setFormTitle(String formTitle) {
		_formTitle = formTitle;
	}

	@Override
	public String getDayTab() {
		if (_dayTab == null) {
			return StringPool.BLANK;
		}
		else {
			return _dayTab;
		}
	}

	@Override
	public void setDayTab(String dayTab) {
		_dayTab = dayTab;
	}

	@Override
	public long getCalendarBookingId() {
		return _calendarBookingId;
	}

	@Override
	public void setCalendarBookingId(long calendarBookingId) {
		_calendarBookingId = calendarBookingId;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@Override
	public String getStatusByUsername() {
		if (_statusByUsername == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUsername;
		}
	}

	@Override
	public void setStatusByUsername(String statusByUsername) {
		_statusByUsername = statusByUsername;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCuserId() {
		return _cuserId;
	}

	@Override
	public void setCuserId(long cuserId) {
		_cuserId = cuserId;
	}

	@Override
	public long getMuserId() {
		return _muserId;
	}

	@Override
	public void setMuserId(long muserId) {
		_muserId = muserId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RemoteForm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RemoteForm toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RemoteForm)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RemoteFormImpl remoteFormImpl = new RemoteFormImpl();

		remoteFormImpl.setRemoteFormId(getRemoteFormId());
		remoteFormImpl.setCreator(getCreator());
		remoteFormImpl.setApplicant(getApplicant());
		remoteFormImpl.setRemoteDate(getRemoteDate());
		remoteFormImpl.setEndDateTime(getEndDateTime());
		remoteFormImpl.setRemark(getRemark());
		remoteFormImpl.setExtPayload(getExtPayload());
		remoteFormImpl.setFormTitle(getFormTitle());
		remoteFormImpl.setDayTab(getDayTab());
		remoteFormImpl.setCalendarBookingId(getCalendarBookingId());
		remoteFormImpl.setStatus(getStatus());
		remoteFormImpl.setStatusByUserId(getStatusByUserId());
		remoteFormImpl.setStatusByUsername(getStatusByUsername());
		remoteFormImpl.setStatusDate(getStatusDate());
		remoteFormImpl.setCompanyId(getCompanyId());
		remoteFormImpl.setGroupId(getGroupId());
		remoteFormImpl.setCuserId(getCuserId());
		remoteFormImpl.setMuserId(getMuserId());
		remoteFormImpl.setCreateDate(getCreateDate());
		remoteFormImpl.setModifiedDate(getModifiedDate());

		remoteFormImpl.resetOriginalValues();

		return remoteFormImpl;
	}

	@Override
	public int compareTo(RemoteForm remoteForm) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), remoteForm.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RemoteForm)) {
			return false;
		}

		RemoteForm remoteForm = (RemoteForm)obj;

		long primaryKey = remoteForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RemoteFormModelImpl remoteFormModelImpl = this;

		remoteFormModelImpl._originalCreator = remoteFormModelImpl._creator;

		remoteFormModelImpl._originalStatus = remoteFormModelImpl._status;

		remoteFormModelImpl._setOriginalStatus = false;

		remoteFormModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RemoteForm> toCacheModel() {
		RemoteFormCacheModel remoteFormCacheModel = new RemoteFormCacheModel();

		remoteFormCacheModel.remoteFormId = getRemoteFormId();

		remoteFormCacheModel.creator = getCreator();

		String creator = remoteFormCacheModel.creator;

		if ((creator != null) && (creator.length() == 0)) {
			remoteFormCacheModel.creator = null;
		}

		remoteFormCacheModel.applicant = getApplicant();

		String applicant = remoteFormCacheModel.applicant;

		if ((applicant != null) && (applicant.length() == 0)) {
			remoteFormCacheModel.applicant = null;
		}

		Date remoteDate = getRemoteDate();

		if (remoteDate != null) {
			remoteFormCacheModel.remoteDate = remoteDate.getTime();
		}
		else {
			remoteFormCacheModel.remoteDate = Long.MIN_VALUE;
		}

		Date endDateTime = getEndDateTime();

		if (endDateTime != null) {
			remoteFormCacheModel.endDateTime = endDateTime.getTime();
		}
		else {
			remoteFormCacheModel.endDateTime = Long.MIN_VALUE;
		}

		remoteFormCacheModel.remark = getRemark();

		String remark = remoteFormCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			remoteFormCacheModel.remark = null;
		}

		remoteFormCacheModel.extPayload = getExtPayload();

		String extPayload = remoteFormCacheModel.extPayload;

		if ((extPayload != null) && (extPayload.length() == 0)) {
			remoteFormCacheModel.extPayload = null;
		}

		remoteFormCacheModel.formTitle = getFormTitle();

		String formTitle = remoteFormCacheModel.formTitle;

		if ((formTitle != null) && (formTitle.length() == 0)) {
			remoteFormCacheModel.formTitle = null;
		}

		remoteFormCacheModel.dayTab = getDayTab();

		String dayTab = remoteFormCacheModel.dayTab;

		if ((dayTab != null) && (dayTab.length() == 0)) {
			remoteFormCacheModel.dayTab = null;
		}

		remoteFormCacheModel.calendarBookingId = getCalendarBookingId();

		remoteFormCacheModel.status = getStatus();

		remoteFormCacheModel.statusByUserId = getStatusByUserId();

		remoteFormCacheModel.statusByUsername = getStatusByUsername();

		String statusByUsername = remoteFormCacheModel.statusByUsername;

		if ((statusByUsername != null) && (statusByUsername.length() == 0)) {
			remoteFormCacheModel.statusByUsername = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			remoteFormCacheModel.statusDate = statusDate.getTime();
		}
		else {
			remoteFormCacheModel.statusDate = Long.MIN_VALUE;
		}

		remoteFormCacheModel.companyId = getCompanyId();

		remoteFormCacheModel.groupId = getGroupId();

		remoteFormCacheModel.cuserId = getCuserId();

		remoteFormCacheModel.muserId = getMuserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			remoteFormCacheModel.createDate = createDate.getTime();
		}
		else {
			remoteFormCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			remoteFormCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			remoteFormCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return remoteFormCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{remoteFormId=");
		sb.append(getRemoteFormId());
		sb.append(", creator=");
		sb.append(getCreator());
		sb.append(", applicant=");
		sb.append(getApplicant());
		sb.append(", remoteDate=");
		sb.append(getRemoteDate());
		sb.append(", endDateTime=");
		sb.append(getEndDateTime());
		sb.append(", remark=");
		sb.append(getRemark());
		sb.append(", extPayload=");
		sb.append(getExtPayload());
		sb.append(", formTitle=");
		sb.append(getFormTitle());
		sb.append(", dayTab=");
		sb.append(getDayTab());
		sb.append(", calendarBookingId=");
		sb.append(getCalendarBookingId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUsername=");
		sb.append(getStatusByUsername());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", cuserId=");
		sb.append(getCuserId());
		sb.append(", muserId=");
		sb.append(getMuserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.remote.application.model.RemoteForm");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>remoteFormId</column-name><column-value><![CDATA[");
		sb.append(getRemoteFormId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creator</column-name><column-value><![CDATA[");
		sb.append(getCreator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicant</column-name><column-value><![CDATA[");
		sb.append(getApplicant());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remoteDate</column-name><column-value><![CDATA[");
		sb.append(getRemoteDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDateTime</column-name><column-value><![CDATA[");
		sb.append(getEndDateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remark</column-name><column-value><![CDATA[");
		sb.append(getRemark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extPayload</column-name><column-value><![CDATA[");
		sb.append(getExtPayload());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formTitle</column-name><column-value><![CDATA[");
		sb.append(getFormTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dayTab</column-name><column-value><![CDATA[");
		sb.append(getDayTab());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarBookingId</column-name><column-value><![CDATA[");
		sb.append(getCalendarBookingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUsername</column-name><column-value><![CDATA[");
		sb.append(getStatusByUsername());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cuserId</column-name><column-value><![CDATA[");
		sb.append(getCuserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>muserId</column-name><column-value><![CDATA[");
		sb.append(getMuserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RemoteForm.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RemoteForm.class
		};
	private long _remoteFormId;
	private String _creator;
	private String _originalCreator;
	private String _applicant;
	private Date _remoteDate;
	private Date _endDateTime;
	private String _remark;
	private String _extPayload;
	private String _formTitle;
	private String _dayTab;
	private long _calendarBookingId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUsername;
	private Date _statusDate;
	private long _companyId;
	private long _groupId;
	private long _cuserId;
	private long _muserId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private RemoteForm _escapedModel;
}